---
http_interactions:
- request:
    method: get
    uri: https://api.crossref.org/works/10.1371/journal.pone.0214986/transform/application/vnd.crossref.unixsd+xml
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (compatible; Maremma/4.2.6; mailto:info@datacite.org)
      Accept:
      - text/xml
  response:
    status:
      code: 200
      message: OK
    headers:
      Link:
      - <http://dx.doi.org/10.1371/journal.pone.0214986>; rel="canonical", <http://dx.plos.org/10.1371/journal.pone.0214986>;
        version="vor"; rel="item", <https://creativecommons.org/publicdomain/zero/1.0/>;
        version="vor"; rel="license", <http://orcid.org/0000-0002-1856-0546>; title="Matthew
        A. Weber"; rel="author"
      Access-Control-Allow-Origin:
      - "*"
      Access-Control-Allow-Headers:
      - X-Requested-With
      Content-Length:
      - '41843'
      Server:
      - http-kit
      Date:
      - Sat, 06 Jul 2019 14:32:23 GMT
      X-Rate-Limit-Limit:
      - '50'
      X-Rate-Limit-Interval:
      - 1s
      Connection:
      - close
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Sat, 06 Jul 2019 14:32:23 GMT
recorded_with: VCR 3.0.3
