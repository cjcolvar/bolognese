---
http_interactions:
- request:
    method: get
    uri: https://api.crossref.org/works/10.1371/journal.pone.0000030/transform/application/vnd.crossref.unixsd+xml
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (compatible; Maremma/4.2.1; mailto:info@datacite.org)
      Accept:
      - text/xml
  response:
    status:
      code: 200
      message: OK
    headers:
      Link:
      - <http://dx.doi.org/10.1371/journal.pone.0000030>; rel="canonical", <http://dx.plos.org/10.1371/journal.pone.0000030>;
        version="vor"; rel="item", <http://creativecommons.org/licenses/by/4.0/>;
        rel="license"
      Access-Control-Allow-Origin:
      - "*"
      Access-Control-Allow-Headers:
      - X-Requested-With
      Content-Length:
      - '48934'
      Server:
      - http-kit
      Date:
      - Wed, 03 Jul 2019 19:24:19 GMT
      X-Rate-Limit-Limit:
      - '50'
      X-Rate-Limit-Interval:
      - 1s
      Connection:
      - close
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Wed, 03 Jul 2019 19:24:19 GMT
recorded_with: VCR 3.0.3
