---
http_interactions:
- request:
    method: get
    uri: https://identifiers.org/doi/10.7910/DVN/NJ7XSO
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (compatible; Maremma/4.2.1; mailto:info@datacite.org)
      Accept:
      - text/html,application/json,application/xml;q=0.9, text/plain;q=0.8,image/png,*/*;q=0.5
  response:
    status:
      code: 302
      message: ''
    headers:
      Location:
      - https://doi.org/10.7910/DVN/NJ7XSO
      Content-Type:
      - text/html;charset=UTF-8
      Content-Length:
      - '0'
      Date:
      - Wed, 03 Jul 2019 19:24:49 GMT
      Via:
      - 1.1 google
      Alt-Svc:
      - clear
    body:
      encoding: ASCII-8BIT
      string: ''
    http_version: 
  recorded_at: Wed, 03 Jul 2019 19:24:50 GMT
- request:
    method: get
    uri: https://doi.org/10.7910/DVN/NJ7XSO
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (compatible; Maremma/4.2.1; mailto:info@datacite.org)
      Accept:
      - text/html,application/json,application/xml;q=0.9, text/plain;q=0.8,image/png,*/*;q=0.5
  response:
    status:
      code: 302
      message: ''
    headers:
      Date:
      - Wed, 03 Jul 2019 19:24:50 GMT
      Content-Type:
      - text/html;charset=utf-8
      Content-Length:
      - '233'
      Connection:
      - keep-alive
      Set-Cookie:
      - __cfduid=d652ffdae17b855bd6a4631f7a5aa821a1562181890; expires=Thu, 02-Jul-20
        19:24:50 GMT; path=/; domain=.doi.org; HttpOnly
      Vary:
      - Accept
      Location:
      - https://dataverse.harvard.edu/citation?persistentId=doi:10.7910/DVN/NJ7XSO
      Expires:
      - Wed, 03 Jul 2019 19:39:56 GMT
      Expect-Ct:
      - max-age=604800, report-uri="https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct"
      Server:
      - cloudflare
      Cf-Ray:
      - 4f0b3dee9c8fcdd7-CDG
    body:
      encoding: ASCII-8BIT
      string: |-
        <html><head><title>Handle Redirect</title></head>
        <body><a href="https://dataverse.harvard.edu/citation?persistentId=doi:10.7910/DVN/NJ7XSO">https://dataverse.harvard.edu/citation?persistentId=doi:10.7910/DVN/NJ7XSO</a></body></html>
    http_version: 
  recorded_at: Wed, 03 Jul 2019 19:24:50 GMT
- request:
    method: get
    uri: https://dataverse.harvard.edu/citation?persistentId=doi:10.7910/DVN/NJ7XSO
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (compatible; Maremma/4.2.1; mailto:info@datacite.org)
      Accept:
      - text/html,application/json,application/xml;q=0.9, text/plain;q=0.8,image/png,*/*;q=0.5
  response:
    status:
      code: 302
      message: Found
    headers:
      Cache-Control:
      - no-cache="set-cookie"
      Content-Language:
      - en-US
      Content-Type:
      - text/html;charset=ISO-8859-1
      Date:
      - Wed, 03 Jul 2019 19:24:50 GMT
      Location:
      - https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi:10.7910/DVN/NJ7XSO
      Server:
      - Apache/2.4.6 (Red Hat Enterprise Linux) OpenSSL/1.0.2k-fips
      Set-Cookie:
      - AWSELB=EB1179591E49E298C6825A3028F74991071DEE12D3FE010BDBAE7AE7E438B31BFA0246B9F2DBD3EC37C4E69D8B958E3FBF8CF814030B5CB9749AB70FE33A8BB5BB36A149CB;PATH=/;MAX-AGE=28800
      Content-Length:
      - '229'
      Connection:
      - keep-alive
    body:
      encoding: ASCII-8BIT
      string: "<html>\r\n<head><title>Document moved</title></head>\r\n<body><h1>Document
        moved</h1>\r\nThis document has moved <a href=\"https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi:10.7910/DVN/NJ7XSO\">here</a>.<p>\r\n</body>\r\n</html>\r\n"
    http_version: 
  recorded_at: Wed, 03 Jul 2019 19:24:51 GMT
- request:
    method: get
    uri: https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi:10.7910/DVN/NJ7XSO
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (compatible; Maremma/4.2.1; mailto:info@datacite.org)
      Accept:
      - text/html,application/json,application/xml;q=0.9, text/plain;q=0.8,image/png,*/*;q=0.5
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache="set-cookie"
      Content-Type:
      - text/html;charset=UTF-8
      Date:
      - Wed, 03 Jul 2019 19:24:51 GMT
      Server:
      - Apache/2.4.6 (Red Hat Enterprise Linux) OpenSSL/1.0.2k-fips
      Set-Cookie:
      - JSESSIONID=94bf5a0d97d280d999a5314ffe12; Path=/; Secure; HttpOnly, AWSELB=EB1179591E49E298C6825A3028F74991071DEE12D3FE010BDBAE7AE7E438B31BFA0246B9F2DBD3EC37C4E69D8B958E3FBF8CF814030B5CB9749AB70FE33A8BB5BB36A149CB;PATH=/;MAX-AGE=28800
      Connection:
      - keep-alive
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Wed, 03 Jul 2019 19:24:52 GMT
recorded_with: VCR 3.0.3
