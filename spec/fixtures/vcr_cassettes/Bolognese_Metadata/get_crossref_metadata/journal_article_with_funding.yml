---
http_interactions:
- request:
    method: get
    uri: https://doi.org/ra/10.3389
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (compatible; Maremma/4.2.6; mailto:info@datacite.org)
      Accept:
      - text/html,application/json,application/xml;q=0.9, text/plain;q=0.8,image/png,*/*;q=0.5
  response:
    status:
      code: 200
      message: ''
    headers:
      Date:
      - Sun, 07 Jul 2019 07:57:06 GMT
      Content-Type:
      - application/json;charset=UTF-8
      Content-Length:
      - '54'
      Connection:
      - keep-alive
      Set-Cookie:
      - __cfduid=d8e4cd68632988d439beb358aae6a8bd41562486226; expires=Mon, 06-Jul-20
        07:57:06 GMT; path=/; domain=.doi.org; HttpOnly
      Expect-Ct:
      - max-age=604800, report-uri="https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct"
      Server:
      - cloudflare
      Cf-Ray:
      - 4f2844037fb5c281-FRA
    body:
      encoding: ASCII-8BIT
      string: |-
        [
          {
            "DOI": "10.3389",
            "RA": "Crossref"
          }
        ]
    http_version: 
  recorded_at: Sun, 07 Jul 2019 07:57:06 GMT
- request:
    method: get
    uri: https://api.crossref.org/works/10.3389/fpls.2019.00816/transform/application/vnd.crossref.unixsd+xml
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (compatible; Maremma/4.2.6; mailto:info@datacite.org)
      Accept:
      - text/xml
  response:
    status:
      code: 200
      message: OK
    headers:
      Link:
      - <http://dx.doi.org/10.3389/fpls.2019.00816>; rel="canonical", <https://www.frontiersin.org/article/10.3389/fpls.2019.00816/full>;
        version="vor"; rel="item", <https://creativecommons.org/licenses/by/4.0/>;
        version="vor"; rel="license"
      Access-Control-Allow-Origin:
      - "*"
      Access-Control-Allow-Headers:
      - X-Requested-With
      Content-Length:
      - '44125'
      Server:
      - http-kit
      Date:
      - Sun, 07 Jul 2019 07:57:07 GMT
      X-Rate-Limit-Limit:
      - '50'
      X-Rate-Limit-Interval:
      - 1s
      Connection:
      - close
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Sun, 07 Jul 2019 07:57:07 GMT
recorded_with: VCR 3.0.3
