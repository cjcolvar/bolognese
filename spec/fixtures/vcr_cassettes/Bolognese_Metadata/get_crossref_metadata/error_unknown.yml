---
http_interactions:
- request:
    method: get
    uri: https://doi.org/ra/10.1017
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (compatible; Maremma/4.2.6; mailto:info@datacite.org)
      Accept:
      - text/html,application/json,application/xml;q=0.9, text/plain;q=0.8,image/png,*/*;q=0.5
  response:
    status:
      code: 200
      message: ''
    headers:
      Date:
      - Sat, 06 Jul 2019 16:39:46 GMT
      Content-Type:
      - application/json;charset=UTF-8
      Content-Length:
      - '54'
      Connection:
      - keep-alive
      Set-Cookie:
      - __cfduid=d7ea2e4243c3b2147b4f6478f41412fd71562431186; expires=Sun, 05-Jul-20
        16:39:46 GMT; path=/; domain=.doi.org; HttpOnly
      Expect-Ct:
      - max-age=604800, report-uri="https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct"
      Server:
      - cloudflare
      Cf-Ray:
      - 4f23044579ccbed3-FRA
    body:
      encoding: ASCII-8BIT
      string: |-
        [
          {
            "DOI": "10.1017",
            "RA": "Crossref"
          }
        ]
    http_version: 
  recorded_at: Sat, 06 Jul 2019 16:39:46 GMT
- request:
    method: get
    uri: https://api.crossref.org/works/10.1017/9781108348843/transform/application/vnd.crossref.unixsd+xml
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (compatible; Maremma/4.2.6; mailto:info@datacite.org)
      Accept:
      - text/xml
  response:
    status:
      code: 200
      message: OK
    headers:
      Link:
      - <http://dx.doi.org/10.1017/9781108348843>; rel="canonical", <https://www.cambridge.org/core/terms>;
        rel="license"
      Access-Control-Allow-Origin:
      - "*"
      Access-Control-Allow-Headers:
      - X-Requested-With
      Content-Length:
      - '77439'
      Server:
      - http-kit
      Date:
      - Sat, 06 Jul 2019 16:39:47 GMT
      X-Rate-Limit-Limit:
      - '50'
      X-Rate-Limit-Interval:
      - 1s
      Connection:
      - close
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Sat, 06 Jul 2019 16:39:47 GMT
recorded_with: VCR 3.0.3
