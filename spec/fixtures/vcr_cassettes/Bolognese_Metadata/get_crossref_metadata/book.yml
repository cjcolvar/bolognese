---
http_interactions:
- request:
    method: get
    uri: https://doi.org/ra/10.1017
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (compatible; Maremma/4.7.1; mailto:info@datacite.org)
      Accept:
      - text/html,application/json,application/xml;q=0.9, text/plain;q=0.8,image/png,*/*;q=0.5
  response:
    status:
      code: 200
      message: ''
    headers:
      Date:
      - Sun, 12 Jul 2020 11:23:23 GMT
      Content-Type:
      - application/json;charset=UTF-8
      Connection:
      - keep-alive
      Set-Cookie:
      - __cfduid=df28529753bfd353f5f9edba5f062467e1594553003; expires=Tue, 11-Aug-20
        11:23:23 GMT; path=/; domain=.doi.org; HttpOnly; SameSite=Lax; Secure
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Request-Id:
      - 03e45d070d0000c2900f174200000001
      Expect-Ct:
      - max-age=604800, report-uri="https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct"
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Server:
      - cloudflare
      Cf-Ray:
      - 5b1a6451af76c290-FRA
    body:
      encoding: ASCII-8BIT
      string: |-
        [
          {
            "DOI": "10.1017",
            "RA": "Crossref"
          }
        ]
    http_version:
  recorded_at: Sun, 12 Jul 2020 11:23:23 GMT
- request:
    method: get
    uri: https://api.crossref.org/works/10.1017/9781108348843/transform/application/vnd.crossref.unixsd+xml
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (compatible; Maremma/4.7.1; mailto:info@datacite.org)
      Accept:
      - text/xml
  response:
    status:
      code: 200
      message: OK
    headers:
      Link:
      - <http://dx.doi.org/10.1017/9781108348843>; rel="canonical", <https://www.cambridge.org/core/terms>;
        rel="license"
      Access-Control-Allow-Origin:
      - "*"
      Access-Control-Allow-Headers:
      - X-Requested-With
      Content-Length:
      - '77587'
      Server:
      - http-kit
      Date:
      - Sun, 12 Jul 2020 11:23:24 GMT
      X-Rate-Limit-Limit:
      - '50'
      X-Rate-Limit-Interval:
      - 1s
      Connection:
      - close
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Sun, 12 Jul 2020 11:23:24 GMT
recorded_with: VCR 3.0.3
