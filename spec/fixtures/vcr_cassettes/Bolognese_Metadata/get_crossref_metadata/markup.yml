---
http_interactions:
- request:
    method: get
    uri: https://doi.org/ra/10.1098
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (compatible; Maremma/4.7.1; mailto:info@datacite.org)
      Accept:
      - text/html,application/json,application/xml;q=0.9, text/plain;q=0.8,image/png,*/*;q=0.5
  response:
    status:
      code: 200
      message: ''
    headers:
      Date:
      - Sun, 12 Jul 2020 11:23:19 GMT
      Content-Type:
      - application/json;charset=UTF-8
      Connection:
      - keep-alive
      Set-Cookie:
      - __cfduid=decc5e74c6ca0552b01624d97790d8e9b1594552999; expires=Tue, 11-Aug-20
        11:23:19 GMT; path=/; domain=.doi.org; HttpOnly; SameSite=Lax; Secure
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Request-Id:
      - 03e45cf7720000975a2bb28200000001
      Expect-Ct:
      - max-age=604800, report-uri="https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct"
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Server:
      - cloudflare
      Cf-Ray:
      - 5b1a6438b8af975a-FRA
    body:
      encoding: ASCII-8BIT
      string: |-
        [
          {
            "DOI": "10.1098",
            "RA": "Crossref"
          }
        ]
    http_version:
  recorded_at: Sun, 12 Jul 2020 11:23:19 GMT
- request:
    method: get
    uri: https://api.crossref.org/works/10.1098/rspb.2017.0132/transform/application/vnd.crossref.unixsd+xml
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (compatible; Maremma/4.7.1; mailto:info@datacite.org)
      Accept:
      - text/xml
  response:
    status:
      code: 200
      message: OK
    headers:
      Link:
      - <http://dx.doi.org/10.1098/rspb.2017.0132>; rel="canonical", <https://royalsocietypublishing.org/doi/pdf/10.1098/rspb.2017.0132>;
        version="vor"; rel="item", <https://royalsociety.org/-/media/journals/author/Licence-to-Publish-20062019-final.pdf>;
        version="vor"; rel="license", <https://royalsociety.org/journals/ethics-policies/data-sharing-mining/>;
        version="tdm"; rel="license", <http://orcid.org/0000-0003-1406-0680>; title="Liam
        R. Dougherty"; rel="author", <http://orcid.org/0000-0001-6072-3807>; title="Kathryn
        B. McNamara"; rel="author", <http://orcid.org/0000-0003-0562-1474>; title="Leigh
        W. Simmons"; rel="author"
      Access-Control-Allow-Origin:
      - "*"
      Access-Control-Allow-Headers:
      - X-Requested-With
      Content-Length:
      - '18400'
      Server:
      - http-kit
      Date:
      - Sun, 12 Jul 2020 11:23:20 GMT
      X-Rate-Limit-Limit:
      - '50'
      X-Rate-Limit-Interval:
      - 1s
      Connection:
      - close
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Sun, 12 Jul 2020 11:23:20 GMT
recorded_with: VCR 3.0.3
