---
http_interactions:
- request:
    method: get
    uri: https://doi.org/ra/10.1007
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (compatible; Maremma/4.2.3; mailto:info@datacite.org)
      Accept:
      - text/html,application/json,application/xml;q=0.9, text/plain;q=0.8,image/png,*/*;q=0.5
  response:
    status:
      code: 200
      message: ''
    headers:
      Date:
      - Thu, 04 Jul 2019 05:37:41 GMT
      Content-Type:
      - application/json;charset=UTF-8
      Content-Length:
      - '54'
      Connection:
      - keep-alive
      Set-Cookie:
      - __cfduid=dc5a0ac7629f1a2c9d22e1fd02e3e10aa1562218661; expires=Fri, 03-Jul-20
        05:37:41 GMT; path=/; domain=.doi.org; HttpOnly
      Expect-Ct:
      - max-age=604800, report-uri="https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct"
      Server:
      - cloudflare
      Cf-Ray:
      - 4f0ebfaa2bf669c2-CDG
    body:
      encoding: ASCII-8BIT
      string: |-
        [
          {
            "DOI": "10.1007",
            "RA": "Crossref"
          }
        ]
    http_version: 
  recorded_at: Thu, 04 Jul 2019 05:37:41 GMT
- request:
    method: get
    uri: https://api.crossref.org/works/10.1007/978-3-319-75889-3_1/transform/application/vnd.crossref.unixsd+xml
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (compatible; Maremma/4.2.3; mailto:info@datacite.org)
      Accept:
      - text/xml
  response:
    status:
      code: 200
      message: OK
    headers:
      Link:
      - <http://dx.doi.org/10.1007/978-3-319-75889-3_1>; rel="canonical", <http://link.springer.com/content/pdf/10.1007/978-3-319-75889-3_1>;
        version="vor"; rel="item", <http://www.springer.com/tdm>; rel="license", <http://www.springer.com/tdm>;
        rel="license"
      Access-Control-Allow-Origin:
      - "*"
      Access-Control-Allow-Headers:
      - X-Requested-With
      Content-Length:
      - '30612'
      Server:
      - http-kit
      Date:
      - Thu, 04 Jul 2019 05:37:42 GMT
      X-Rate-Limit-Limit:
      - '50'
      X-Rate-Limit-Interval:
      - 1s
      Connection:
      - close
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Thu, 04 Jul 2019 05:37:42 GMT
recorded_with: VCR 3.0.3
