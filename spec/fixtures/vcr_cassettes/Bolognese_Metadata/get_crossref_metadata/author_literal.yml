---
http_interactions:
- request:
    method: get
    uri: https://doi.org/ra/10.1038
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (compatible; Maremma/4.5; mailto:info@datacite.org)
      Accept:
      - text/html,application/json,application/xml;q=0.9, text/plain;q=0.8,image/png,*/*;q=0.5
  response:
    status:
      code: 200
      message: ''
    headers:
      Date:
      - Fri, 07 Feb 2020 21:53:15 GMT
      Content-Type:
      - application/json;charset=UTF-8
      Connection:
      - keep-alive
      Set-Cookie:
      - __cfduid=dc698eb6996043bc1738bc745fc893e621581112395; expires=Sun, 08-Mar-20
        21:53:15 GMT; path=/; domain=.doi.org; HttpOnly; SameSite=Lax; Secure
      Cf-Cache-Status:
      - DYNAMIC
      Expect-Ct:
      - max-age=604800, report-uri="https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct"
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Server:
      - cloudflare
      Cf-Ray:
      - 561898797b351756-FRA
    body:
      encoding: ASCII-8BIT
      string: |-
        [
          {
            "DOI": "10.1038",
            "RA": "Crossref"
          }
        ]
    http_version: 
  recorded_at: Fri, 07 Feb 2020 21:53:15 GMT
- request:
    method: get
    uri: https://api.crossref.org/works/10.1038/ng.3834/transform/application/vnd.crossref.unixsd+xml
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (compatible; Maremma/4.5; mailto:info@datacite.org)
      Accept:
      - text/xml
  response:
    status:
      code: 200
      message: OK
    headers:
      Link:
      - <http://dx.doi.org/10.1038/ng.3834>; rel="canonical", <http://www.nature.com/articles/ng.3834.pdf>;
        version="vor"; type="application/pdf"; rel="item", <http://www.nature.com/articles/ng.3834>;
        version="vor"; type="text/html"; rel="item", <http://www.nature.com/doifinder/10.1038/ng.3834>;
        version="vor"; rel="item", <http://www.nature.com/articles/ng.3834.pdf>; version="vor";
        type="application/pdf"; rel="item", <http://www.springer.com/tdm>; version="tdm";
        rel="license", <http://orcid.org/0000-0002-1930-9265>; title="Alexandra J
        Scott"; rel="author", <http://orcid.org/0000-0001-7287-6448>; title="Emily
        K Tsang"; rel="author", <http://orcid.org/0000-0002-8762-622X>; title="Liron
        Ganel"; rel="author", <http://orcid.org/0000-0002-5287-627X>; title="Alexis
        Battle"; rel="author", <http://orcid.org/0000-0003-3828-8970>; title="Donald
        F Conrad"; rel="author"
      Access-Control-Allow-Origin:
      - "*"
      Access-Control-Allow-Headers:
      - X-Requested-With
      Content-Length:
      - '41407'
      Server:
      - http-kit
      Date:
      - Fri, 07 Feb 2020 21:53:16 GMT
      X-Rate-Limit-Limit:
      - '50'
      X-Rate-Limit-Interval:
      - 1s
      Connection:
      - close
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Fri, 07 Feb 2020 21:53:16 GMT
recorded_with: VCR 3.0.3
